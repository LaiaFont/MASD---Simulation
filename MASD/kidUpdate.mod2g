use common as knowledge.
use printText as actionspec.
use map as knowledge.

% Kid statuses: playing, guided

module kidUpdate {
	% Waiting to be informed of the initial position
	if 
		goal(wait_for_location)
		,(tickerAgent).sent(initial_place(N, Pos))
		, bel(concat_strings(N, "Initially at ", Pos, M))
	then
		adopt(keep_calm) 
		+ drop(wait_for_location) 
		+ insert(my_place(Pos))
		+ insert(my_status(playing))
		+ insert(my_name(N))
		+ printText(M) 
		.

	% Receiving a tick to act
	if 
		(_).sent(tick)  
	then
		insert(tick).
	
	% Respond who is in the same room
	% and I'm in the same place
	forall (Ag).sent(hello(P)) do {
		if 
			bel(my_place(P), my_status(S)),
			not(bel(obey(Ag)))
		then
			(Ag).send(kid_at(P, S))
			.
	}
		
	% Someone is taking care of me
	if
		(Ag).sent(guiding_you),
		bel(my_status(S)),
		bel(my_name(Me), concat_strings(Me, "Following ", Ag, M))
	then
		delete(my_status(S)) +
		insert(my_status(guided)) +
		drop(keep_calm) +
		adopt(obey(Ag)) +
		printText(M)
		.
	
	% I'm guided and I'm moved
	if 
		goal(obey(Ag)),
		(Ag).sent(go_to(NP)),
		bel(my_place(OP), my_name(Me), concat_strings(Me, "I've been guided to ", NP, M))
	then
		delete(my_place(OP)) +
		insert(my_place(NP)) +
		printText(M)
		.
		
	% I'm guided and I've reached the exit
	if 
		goal(obey(Ag)),
		bel(my_place(E), exit(E)),
		bel (my_name(Me), concat_strings(Me, "I'm at safe place. Bye!! ", "", M))
	then
		drop(obey(Ag)) +
		printText(M)
		.
}