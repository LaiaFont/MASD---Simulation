use common as knowledge.
use map as knowledge.
use printText as actionspec.

module adultUpdate {
	% Waiting to be informed of the initial position
	if 
		goal(wait_for_location)
		,(tickerAgent).sent(initial_place(N, Pos))
		, bel(concat_strings(N, "Initially at ", Pos, M))
	then
		adopt(keep_calm) 
		+ drop(wait_for_location) 
		+ insert(my_place(Pos))
		+ insert(my_status(resting))
		+ insert(my_name(N))
		+ printText(M) 
		.
		
	% Alarm heard
	if 
		(envAgent).sent(emergency_alarm),
		bel(my_name(N), concat_strings(N, "I've heard an alarm. I'll better go out", "", M))
	then
		printText(M) +
		drop(keep_calm) 
		% The goal is at top level
		+ self.adopt(scape)
		.
		
	% Receiving a tick to act
	if 
		(_).sent(tick)  
	then
		insert(tick).
		
	% Ask for status of room to environment
	if 
		bel(query_status(R))
	then
		(envAgent).send(query_status(R))
		+ delete(query_status(R)).
		
	% Status of a room received from environment
	if
		(envAgent).sent(status(R, N))
		, bel(status(R, O))
	then {
		if true then delete(status(R, O)) + insert(status(R, N)).
		% Recalculate my route if the next step is not clear
		if 
			bel(going(C, R)), 
			not(bel(status(R, clear)))
			,bel(my_name(Me), concat_strings(Me, "Next step is not clear, I'll better look for another itinerary... ", "", M))
		then 
			printText(M) + delete(going(C, R)).
	}
		
	% Ask who is in the same room
	if
		bel(who_is_here, my_place(P))
	then {
		% First forget previous beliefs on who is here
		forall bel(kid_at(K, P, S)) do {if true then delete(kid_at(K, P, S)).}
		forall bel(adult_at(A, P, S)) do {if true then delete(adult_at(A, P, S)).}
		
		% Then ask who is here
		if true then
			delete(who_is_here) +
			(locationChannel).send(hello(P)).
	}
		
	% Receive statuses of adults in the same room
	if
		bel(my_place(P)),
		(Ag).sent(adult_at(P, S))
	then {
		% Remove all old states of Ag 
		forall bel(adult_at(Ag, Op, Os)) do {if true then delete(adult_at(Ag,Op,Os)).}
		% Set the new state
		if true then insert(adult_at(Ag, P, S)) +
		insert(recompute_status)
		.
	}

	% Receive statuses of kids in the same room
	% If I find "new" kids, maybe I have to do something with them
	forall (Ag).sent(kid_at(P, playing)) do {
		if
			bel(my_place(P)),
			not (bel(guiding(Ag))),
			bel(my_name(Me), concat_strings(Me, "There is lonely child in this room: ", Ag, M))
		then {
			% Remove all old states of Ag 
			forall bel(kid_at(Ag, Op, Os)) do {if true then delete(kid_at(Ag,Op,Os)).}
			% Set the new state
			if true then 
				insert(kid_at(Ag, P, playing)) +
				printText(M) +
				insert(recompute_status)
				.
		}
	}
		
	% Respond who is in the same room
	% Only respond if I'm not the requester 
	% and I'm in the same place
	forall (Ag).sent(hello(P)) do { 
		if	
			bel(my_place(P), my_status(S)),
			not(bel(my_name(Ag))) 
		then
			(Ag).send(adult_at(P, S))
			.
	}
}