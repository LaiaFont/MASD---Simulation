use common as knowledge.
use map as knowledge.
use printText as actionspec.

module adultUpdate {
	% Waiting to be informed of the initial position
	if 
		goal(wait_for_location)
		,(tickerAgent).sent(initial_place(Pos))
	then
		adopt(keep_calm) 
		+ drop(wait_for_location) 
		%+ adopt(scape) 
		+ insert(my_place(Pos))
		+ printText(Pos) 
		%+ (env).send(entering(adult, Pos))
		.
		
	% Alarm heard
	if 
		(envAgent).sent(emergency_alarm)
	then
		printText("There is an alarm!!") +
		drop(keep_calm) 
		% The goal is at top level
		+ self.adopt(scape)
		.
		
	% Receiving a tick to act
	if 
		(_).sent(tick)  
	then
		insert(tick).
		
	% Ask for status of room to environment
	if
		(envAgent).sent(status(R, N))
		, bel(status(R, O))
	then {
		if true then delete(status(R, O)) + insert(status(R, N)).
		% Recalculate my route if the next step is not clear
		if bel(going(C, R)), not (bel(status(R, clear))) then printText("Next step not clear") + delete(going(C, R)).
	}
	
	% Status of a room received from environment
	if 
		bel(query_status(R))
	then
		(envAgent).send(query_status(R))
		+ delete(query_status(R)).
}